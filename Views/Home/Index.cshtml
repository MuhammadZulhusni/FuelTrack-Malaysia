@model dynamic

@{
    ViewData["Title"] = "Home Page";
}

<style>
.fade-in-bottom {
    opacity: 0;
    transform: translateY(20px); 
    transition: opacity 0.6s ease-out, transform 0.6s ease-out; 
}

.fade-in-bottom.is-visible {
    opacity: 1;
    transform: translateY(0); 
}
</style>

<div class="row text-center mb-5">
    <div class="col-12">
        <h1 class="display-4 fw-bold fade-in-bottom">Welcome to FuelTrack Malaysia</h1>
        <p class="lead text-muted mt-3 fade-in-bottom">
            Your one-stop solution for tracking fuel consumption and staying informed about the latest petrol and diesel prices across the nation.
        </p>
    </div>
</div>

<div class="row justify-content-center mb-5" id="price-card-section">
    <div class="col-12 text-center mb-4">
        <h2 class="h3 fw-semibold fade-in-bottom">Latest Fuel Prices</h2>
        <p class="text-muted fade-in-bottom">Stay up-to-date with current fuel prices to plan your journeys and save money.</p>
    </div>
    
    <div class="col-md-4 mb-4 fade-in-bottom">
        <div class="card shadow-sm border-0 rounded-3 h-100">
            <div class="card-body text-center p-4">
                <i class="bi bi-fuel-pump-fill text-primary display-4 mb-3"></i>
                <h5 class="card-title fw-bold">RON 97</h5>
                <h2 class="display-6 fw-bold text-success">RM <span id="ron97-price">0.00</span></h2>
                <small class="text-muted">per Litre</small>
            </div>
        </div>
    </div>
    <div class="col-md-4 mb-4 fade-in-bottom">
        <div class="card shadow-sm border-0 rounded-3 h-100">
            <div class="card-body text-center p-4">
                <i class="bi bi-fuel-pump-fill text-primary display-4 mb-3"></i>
                <h5 class="card-title fw-bold">RON 95</h5>
                <h2 class="display-6 fw-bold text-success">RM <span id="ron95-price">0.00</span></h2>
                <small class="text-muted">per Litre</small>
            </div>
        </div>
    </div>
    
    <div class="col-md-4 mb-4 fade-in-bottom">
        <div class="card shadow-sm border-0 rounded-3 h-100">
            <div class="card-body text-center p-4">
                <i class="bi bi-fuel-pump-fill text-primary display-4 mb-3"></i>
                <h5 class="card-title fw-bold">Diesel</h5>
                <h2 class="display-6 fw-bold text-success">RM <span id="diesel-price">0.00</span></h2>
                <small class="text-muted">per Litre</small>
            </div>
        </div>
    </div>
</div>

<div class="row text-center">
    <div class="col-12">
        <a href="/Dashboard" class="btn btn-primary btn-lg rounded-pill fw-semibold shadow-lg fade-in-bottom">
            <i class="bi bi-speedometer2 me-2"></i>
            View Dashboard
        </a>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const observerOptions = {
                root: null,
                rootMargin: '0px',
                threshold: 0.5
            };

            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        observer.unobserve(entry.target);
                    }
                });
            }, observerOptions);

            const latestPriceObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        fetchAndAnimatePrices();
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            // Change this line to look for the new class
            const elementsToAnimate = document.querySelectorAll('.fade-in-bottom');
            elementsToAnimate.forEach(element => {
                observer.observe(element);
            });
            
            // Observe the price cards container to trigger the data fetch
            const priceSection = document.getElementById('price-card-section');
            if (priceSection) {
                latestPriceObserver.observe(priceSection);
            }

            async function fetchAndAnimatePrices() {
                try {
                    // Call the new API endpoint
                    const response = await fetch('/Dashboard/GetFuelData');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    
                    const latestPrices = getLatestPrices(data.fuelPrices);

                    // Animate the prices with the fetched data
                    animateValue(document.getElementById('ron97-price'), 0, latestPrices.ron97, 1500);
                    animateValue(document.getElementById('ron95-price'), 0, latestPrices.ron95, 1500);
                    animateValue(document.getElementById('diesel-price'), 0, latestPrices.diesel, 1500);
                    
                } catch (error) {
                    console.error("Could not fetch latest fuel prices:", error);
                    // You can add a fallback here, like displaying "N/A"
                }
            }
            
            function getLatestPrices(fuelPrices) {
                const latest = { ron95: 0, ron97: 0, diesel: 0 };
                // Sort by date descending to find the latest prices
                const sorted = [...fuelPrices].sort((a, b) => new Date(b.date) - new Date(a.date));
                
                for (const item of sorted) {
                    if (!latest[item.fuel_type]) {
                        latest[item.fuel_type] = item.price;
                    }
                    // Stop once we have all three prices
                    if (latest.ron95 && latest.ron97 && latest.diesel) {
                        break;
                    }
                }
                return latest;
            }

            function animateValue(element, start, end, duration) {
                let startTimestamp = null;
                const step = (timestamp) => {
                    if (!startTimestamp) startTimestamp = timestamp;
                    const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                    const value = start + progress * (end - start);
                    element.textContent = value.toFixed(2);
                    if (progress < 1) {
                        window.requestAnimationFrame(step);
                    }
                };
                window.requestAnimationFrame(step);
            }
        });
    </script>
}